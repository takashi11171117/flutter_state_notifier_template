// Mocks generated by Mockito 5.2.0 from annotations
// in flutter_state_notifier_template/test/counter_usecase_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i3;

import 'package:flutter_state_notifier_template/repository/data_source/shared_preference_data_source.dart'
    as _i2;
import 'package:flutter_state_notifier_template/repository/shared_preference_repository.dart'
    as _i4;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

/// A class which mocks [SharedPreferencesDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockSharedPreferencesDataSource extends _i1.Mock
    implements _i2.SharedPreferencesDataSource {
  MockSharedPreferencesDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<T?> load<T>(_i4.SharedPreferencesKey? key) =>
      (super.noSuchMethod(Invocation.method(#load, [key]),
          returnValue: Future<T?>.value()) as _i3.Future<T?>);
  @override
  _i3.Future<bool> save<T>(_i4.SharedPreferencesKey? key, T? value) =>
      (super.noSuchMethod(Invocation.method(#save, [key, value]),
          returnValue: Future<bool>.value(false)) as _i3.Future<bool>);
  @override
  _i3.Future<bool> exists(_i4.SharedPreferencesKey? key) =>
      (super.noSuchMethod(Invocation.method(#exists, [key]),
          returnValue: Future<bool>.value(false)) as _i3.Future<bool>);
  @override
  _i3.Future<bool> clear() => (super.noSuchMethod(Invocation.method(#clear, []),
      returnValue: Future<bool>.value(false)) as _i3.Future<bool>);
}
